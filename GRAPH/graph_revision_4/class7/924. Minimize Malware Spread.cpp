#include <bits/stdc++.h>
using namespace std;

vector<int> par;
vector<int> size;

int find(int i)
{
    if (par[i] == i)
    {
        return i;
    }
    return par[i] = find(par[i]);
}

void unite(int p1, int p2)
{
    if (size[p1] > size[p2])
    {
        par[p2] = p1;
        size[p1] += size[p2];
    }
    else
    {
        par[p1] = p2;
        size[p2] += size[p1];
    }
}

int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
{
    int n = graph.size();
    int m = graph[0].size();
    par.resize(m * n);
    size.resize(m * n);
    for (int i = 0; i < m * n; i++)
    {
        par[i] = i;
        size[i] = 1;
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (i != j and graph[i][j] == 1)
            {
                int p1 = find(i);
                int p2 = find(j);
                if (p1 != p2)
                {
                    unite(p1, p2);
                }
            }
        }
    }

    sort(initial.begin(), initial.end());
    vector<int> infectedCnt(m * n, 0);
    for (int e : initial)
    {
        int p = find(e);
        infectedCnt[p]++;
    }
    int ans = initial[0];
    int maxSize = 0;
    for (int e : initial)
    {
        int p = find(e);
        if (infectedCnt[p] == 1 and size[p] > maxSize)
        {
            ans = e;
            maxSize = size[p];
        }
    }
    return ans;
}

int main()
{
    return 0;
}