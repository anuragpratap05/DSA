#include <bits/stdc++.h>
using namespace std;
vector<int> par;
vector<int> size;
int find(int i)
{
    if (par[i] == i)
    {
        return i;
    }
    return par[i] = find(par[i]);
}

void unite(int p1, int p2)
{
    if (size[p1] < size[p2])
    {
        par[p1] = p2;
        size[p2] += size[p1];
    }
    else
    {
        par[p2] = p1;
        size[p1] += size[p2];
    }
}

void unionfind(vector<vector<int>> &conn, int n)
{
    par.resize(n);
    size.resize(n);
    for (int i = 0; i < n; i++)
    {
        par[i] = i;
        size[i] = 1;
    }
    for (vector<int> &vec : conn)
    {
        int u = vec[0];
        int v = vec[1];
        int p1 = find(u);
        int p2 = find(v);
        if (p1 != p2)
        {
            unite(p1, p2);
        }
    }
}
int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
{
    int n = graph.size();
    vector<vector<int>> conn;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (i != j and graph[i][j] != 0)
            {
                conn.push_back({i, j});
            }
        }
    }
    unionfind(conn, n);
    vector<int> infected(n, 0);
    for (int e : initial)
    {
        int p = find(e);
        infected[p]++;
    }
    sort(initial.begin(), initial.end());
    int ans = initial[0];
    int pop = 0;
    for (int e : initial)
    {
        int p = find(e);
        if (infected[p] == 1 and size[p] > pop)
        {
            ans = e;
            pop = size[p];
        }
    }
    return ans;
}

int main()
{
    return 0;
}